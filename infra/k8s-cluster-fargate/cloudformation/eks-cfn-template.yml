AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and managed by
  eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Parameters:
#  KakfaClusterName:
#    Type: String
#    Description: Kafka Cluster Name
  KubernetesClusterName:
    Type: String
    Description: Kubernetes Cluster Name
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VPC
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref KubernetesClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPublicEUWEST3C
          - !Ref SubnetPublicEUWEST3B
          - !Ref SubnetPublicEUWEST3A
          - !Ref SubnetPrivateEUWEST3C
          - !Ref SubnetPrivateEUWEST3B
          - !Ref SubnetPrivateEUWEST3A
      RoleArn: !GetAtt
        - ServiceRole
        - Arn
      Version: '1.18'
  EKSFargateProfileDefault:
    Type: 'AWS::EKS::FargateProfile'
    Properties:
      FargateProfileName: !Sub '${KubernetesClusterName}-profile-default'
      ClusterName: !Ref ControlPlane
      PodExecutionRoleArn: !GetAtt
        - FargatePodExecutionRole
        - Arn
      Subnets:
        - !Ref SubnetPrivateEUWEST3A
        - !Ref SubnetPrivateEUWEST3B
        - !Ref SubnetPrivateEUWEST3C
      Selectors:
        - Namespace: default
  EKSFargateProfileKubeSystem:
    Type: 'AWS::EKS::FargateProfile'
    Properties:
      FargateProfileName: !Sub '${KubernetesClusterName}-profile-kube-system'
      ClusterName: !Ref KubernetesClusterName
      PodExecutionRoleArn: !GetAtt
        - FargatePodExecutionRole
        - Arn
      Subnets:
        - !Ref SubnetPrivateEUWEST3A
        - !Ref SubnetPrivateEUWEST3B
        - !Ref SubnetPrivateEUWEST3C
      Selectors:
        - Namespace: kube-system
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC
  FargatePodExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKSFargatePods
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/FargatePodExecutionRole'
  IngressDefaultClusterToNodeSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NATIP
        - AllocationId
      SubnetId: !Ref SubnetPublicEUWEST3C
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATIP'
  NATPrivateSubnetRouteEUWEST3A:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3A
  NATPrivateSubnetRouteEUWEST3B:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3B
  NATPrivateSubnetRouteEUWEST3C:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableEUWEST3C
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyELBPermissions:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeInternetGateways'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyELBPermissions'
      Roles:
        - !Ref ServiceRole
  PrivateRouteTableEUWEST3A:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3A'
      VpcId: !Ref VPC
  PrivateRouteTableEUWEST3B:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3B'
      VpcId: !Ref VPC
  PrivateRouteTableEUWEST3C:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableEUWEST3C'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  RouteTableAssociationPrivateEUWEST3A:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3A
      SubnetId: !Ref SubnetPrivateEUWEST3A
  RouteTableAssociationPrivateEUWEST3B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3B
      SubnetId: !Ref SubnetPrivateEUWEST3B
  RouteTableAssociationPrivateEUWEST3C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableEUWEST3C
      SubnetId: !Ref SubnetPrivateEUWEST3C
  RouteTableAssociationPublicEUWEST3A:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3A
  RouteTableAssociationPublicEUWEST3B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3B
  RouteTableAssociationPublicEUWEST3C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicEUWEST3C
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKS
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ServiceRole'
  SubnetPrivateEUWEST3A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 192.168.160.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3A'
      VpcId: !Ref VPC
  SubnetPrivateEUWEST3B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 192.168.128.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3B'
      VpcId: !Ref VPC
  SubnetPrivateEUWEST3C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateEUWEST3C'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 192.168.64.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3A'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 192.168.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3B'
      VpcId: !Ref VPC
  SubnetPublicEUWEST3C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 192.168.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicEUWEST3C'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  ARN:
    Value: !GetAtt
      - ControlPlane
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
  CertificateAuthorityData:
    Value: !GetAtt
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Value: !GetAtt
      - ControlPlane
      - ClusterSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}::ClusterSecurityGroupId'
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Value: !GetAtt
      - ControlPlane
      - Endpoint
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
  FargatePodExecutionRoleARN:
    Value: !GetAtt
      - FargatePodExecutionRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::FargatePodExecutionRoleARN'
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Value: !Ref ControlPlaneSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}::SecurityGroup'
  ServiceRoleARN:
    Value: !GetAtt
      - ServiceRole
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::ServiceRoleARN'
  SharedNodeSecurityGroup:
    Value: !Ref ClusterSharedNodeSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}::SharedNodeSecurityGroup'
  SubnetsPrivate:
    Value: !Join
      - ','
      - - !Ref SubnetPrivateEUWEST3C
        - !Ref SubnetPrivateEUWEST3B
        - !Ref SubnetPrivateEUWEST3A
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
  SubnetsPublic:
    Value: !Join
      - ','
      - - !Ref SubnetPublicEUWEST3C
        - !Ref SubnetPublicEUWEST3B
        - !Ref SubnetPublicEUWEST3A
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}::VPC'
#  KafkaCluster:
#    Type: 'AWS::MSK::Cluster'
#    Properties:
#      ClusterName: ClusterWithAllProperties
#      KafkaVersion: 2.6.1
#      NumberOfBrokerNodes: 3
#      EnhancedMonitoring: PER_BROKER
#      EncryptionInfo:
#        EncryptionAtRest:
#          DataVolumeKMSKeyId: arn:aws:kms:eu-west-3:274314838444:key/1137afad-e18a-4313-a50d-1af94bbc6e2b
#        EncryptionInTransit:
#          ClientBroker: TLS_PLAINTEXT
#          InCluster: true
#      #      OpenMonitoring:
#      #        Prometheus:
#      #          JmxExporter:
#      #            EnabledInBroker: "true"
#      #          NodeExporter:
#      #            EnabledInBroker: "true"
#      #      ConfigurationInfo:
#      #        Arn: ReplaceWithConfigurationArn
#      #        Revision: 1
#      #      ClientAuthentication:
#      #        Tls:
#      #          CertificateAuthorityArnList:
#      #            - ReplaceWithCAArn
#      Tags:
#        Environment: Test
#        Owner: QATeam
#      BrokerNodeGroupInfo:
#        BrokerAZDistribution: DEFAULT
#        InstanceType: kafka.t3.small
#        #        SecurityGroups:
#        #          - ReplaceWithSecurityGroupId
#        StorageInfo:
#          EBSStorageInfo:
#            VolumeSize: 8
#        ClientSubnets:
#          - subnet-1d054550
#          - subnet-7b846013
#          - subnet-c63708bd